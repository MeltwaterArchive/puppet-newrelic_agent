#
#
# This file is managed by the puppet module: <%= @module_name %>
# Any local changes will be overwritten during the next puppet run
# 
# This file configures the New Relic Ruby Agent.
#
# The Puppet template was made from the configuration file for
# version 3.6.7.152 of the agent.
#


# Here are the settings that are common to all environments
common: &default_settings
  # ============================== LICENSE KEY ===============================

  # You must specify the license key associated with your New Relic
  # account.  This key binds your Agent's data to your account in the
  # New Relic service.
  license_key: '<%= @newrelic_license_key %>'

  # Agent Enabled (Ruby/Rails Only)
  # Use this setting to force the agent to run or not run.
  # Default is 'auto' which means the agent will install and run only
  # if a valid dispatcher such as Mongrel is running.  This prevents
  # it from running with Rake or the console.  Set to false to
  # completely turn the agent off regardless of the other settings.
  # Valid values are true, false and auto.
  #
  # agent_enabled: auto
  agent_enabled: <%= @agent_enabled %>

  # Application Name Set this to be the name of your application as
  # you'd like it show up in New Relic. The service will then auto-map
  # instances of your application into an "application" on your
  # dashboard page. If you want to map this instance into multiple
  # apps, like "AJAX Requests" and "All UI" then specify a semicolon
  # separated list of up to three distinct names, or a yaml list.
  # Defaults to the capitalized RAILS_ENV or RACK_ENV (i.e.,
  # Production, Staging, etc)
  #
  # Example:
  #
  #   app_name:
  #       - Ajax Service
  #       - All Services
  #
  app_name: <%= @agent_app_name %>

  # When "true", the agent collects performance data about your
  # application and reports this data to the New Relic service at
  # newrelic.com. This global switch is normally overridden for each
  # environment below. (formerly called 'enabled')
  monitor_mode: <%= @agent_monitor_mode %>

  # Developer mode should be off in every environment but
  # development as it has very high overhead in memory.
  developer_mode: <%= @agent_developer_mode %>

  # The newrelic agent generates its own log file to keep its logging
  # information separate from that of your application. Specify its
  # log level here.
  log_level: <%= @agent_log_level %>

  # Optionally set the path to the log file This is expanded from the
  # root directory (may be relative or absolute, e.g. 'log/' or
  # '/var/log/') The agent will attempt to create this directory if it
  # does not exist.
  # log_file_path: 'log'
  log_file_path: <%= @agent_logfile_path %>

  # Optionally set the name of the log file, defaults to 'newrelic_agent.log'
  # log_file_name: 'newrelic_agent.log'
  log_file_name: <%= @agent_logfile_name %>

  # The newrelic agent communicates with the service via https by default.  This
  # prevents eavesdropping on the performance metrics transmitted by the agent.
  # The encryption required by SSL introduces a nominal amount of CPU overhead,
  # which is performed asynchronously in a background thread.  If you'd prefer
  # to send your metrics over http uncomment the following line.
  # ssl: false
  ssl: <%= @agent_ssl_enable %>

  #============================== Browser Monitoring ===============================
  # New Relic Real User Monitoring gives you insight into the performance real users are
  # experiencing with your website. This is accomplished by measuring the time it takes for
  # your users' browsers to download and render your web pages by injecting a small amount
  # of JavaScript code into the header and footer of each page.
  browser_monitoring:
      # By default the agent automatically injects the monitoring JavaScript
      # into web pages. Set this attribute to false to turn off this behavior.
      auto_instrument: <%= @agent_browser_mon_auto_inst %>

  # Proxy settings for connecting to the New Relic server.
  #
  # If a proxy is used, the host setting is required.  Other settings
  # are optional. Default port is 8080.
  #
  # proxy_host: hostname
  # proxy_port: 8080
  # proxy_user:
  # proxy_pass:
  <%- if @agent_proxy_host -%>
  proxy_host: <%= @agent_proxy_host %>
    <%- if @agent_proxy_port -%>
  proxy_port: <%= @agent_proxy_port %>
    <%- end -%>
    <%- if @agent_proxy_user -%>
  proxy_user: <%= @agent_proxy_user %>
    <%- end -%>
    <%- if @agent_proxy_pass -%>
  proxy_pass: <%= @agent_proxy_pass %>
    <%- end -%>
  <%- end -%>

  # The agent can optionally log all data it sends to New Relic servers to a
  # separate log file for human inspection and auditing purposes. To enable this
  # feature, change 'enabled' below to true.
  # See: https://newrelic.com/docs/ruby/audit-log
  audit_log:
    enabled: <%= @agent_audit_log_enable %>

  # Tells transaction tracer and error collector (when enabled)
  # whether or not to capture HTTP params.  When true, frameworks can
  # exclude HTTP parameters from being captured.
  # Rails: the RoR filter_parameter_logging excludes parameters
  # Java: create a config setting called "ignored_params" and set it to
  #     a comma separated list of HTTP parameter names.
  #     ex: ignored_params: credit_card, ssn, password
  capture_params: <%= @agent_capture_params %>

  # Transaction tracer captures deep information about slow
  # transactions and sends this to the New Relic service once a
  # minute. Included in the transaction is the exact call sequence of
  # the transactions including any SQL statements issued.
  transaction_tracer:

    # Transaction tracer is enabled by default. Set this to false to
    # turn it off. This feature is only available at the Professional
    # and above product levels.
    enabled: <%= @agent_trans_tracer_enable %>

    # Threshold in seconds for when to collect a transaction
    # trace. When the response time of a controller action exceeds
    # this threshold, a transaction trace will be recorded and sent to
    # New Relic. Valid values are any float value, or (default) "apdex_f",
    # which will use the threshold for an dissatisfying Apdex
    # controller action - four times the Apdex T value.
    transaction_threshold: <%= @agent_trans_tracer_trans_threshold %>

    # When transaction tracer is on, SQL statements can optionally be
    # recorded. The recorder has three modes, "off" which sends no
    # SQL, "raw" which sends the SQL statement in its original form,
    # and "obfuscated", which strips out numeric and string literals.
    record_sql: <%= @agent_trans_tracer_record_sql %>

    # Threshold in seconds for when to collect stack trace for a SQL
    # call. In other words, when SQL statements exceed this threshold,
    # then capture and send to New Relic the current stack trace. This is
    # helpful for pinpointing where long SQL calls originate from.
    stack_trace_threshold: <%= @agent_trans_tracer_stack_trace_threshold %>

    # Determines whether the agent will capture query plans for slow
    # SQL queries.  Only supported in mysql and postgres.  Should be
    # set to false when using other adapters.
    # explain_enabled: true
    explain_enabled: <%= @agent_trans_tracer_explain_enabled %>

    # Threshold for query execution time below which query plans will
    # not be captured.  Relevant only when `explain_enabled` is true.
    # explain_threshold: 0.5
    explain_threshold: <%= @agent_trans_tracer_explain_threshold %>

  # Error collector captures information about uncaught exceptions and
  # sends them to New Relic for viewing
  error_collector:

    # Error collector is enabled by default. Set this to false to turn
    # it off. This feature is only available at the Professional and above
    # product levels.
    enabled: <%= @agent_error_collector_enable %>

    # Rails Only - tells error collector whether or not to capture a
    # source snippet around the place of the error when errors are View
    # related.
    capture_source: <%= @agent_error_collector_capture_source %>

    # To stop specific errors from reporting to New Relic, set this property
    # to comma-separated values.  Default is to ignore routing errors,
    # which are how 404's get triggered.
    ignore_errors: "<%= @agent_error_collector_ignore_errors -%>"

  # If you're interested in capturing memcache keys as though they
  # were SQL uncomment this flag. Note that this does increase
  # overhead slightly on every memcached call, and can have security
  # implications if your memcached keys are sensitive
  # capture_memcache_keys: true
    capture_memcache_keys: <%= @agent_error_collector_capture_memcache_keys %>

# Application Environments
# ------------------------------------------
# Environment-specific settings are in this section.
# For Rails applications, RAILS_ENV is used to determine the environment.
# For Java applications, pass -Dnewrelic.environment <environment> to set
# the environment.

# NOTE if your application has other named environments, you should
# provide newrelic configuration settings for these environments here.

<% agent_environment_hash_real.sort.each do |key,config| -%>
<%= key -%>:
  <<: *default_settings
<% config.sort.each do |subkey,val| -%>
  <%= subkey %>: <%= val %>
<% end -%>
<% end -%>
